[general]
# server type:
# switch between kuksa_databroker and kuksa_val_server
# default kuksa_val_server
#server_type = kuksa_val_server
server_type = kuksa_databroker

# VSS mapping file
mapping = vss_dbc.json

# Same configs used for KUKSA.val Server and Databroker
# Note that default values below corresponds to Databroker
# Default values for KUKSA.val Server is commented below

# IP address for server (KUKSA.val Server or Databroker)
#ip = HnR
ip = sdv-runtime

# Port for server (KUKSA.val Server or Databroker)
port = 55555
# port = 8090

# Shall TLS be used (default False for Databroker, True for KUKSA.val Server)
tls = False
# tls = True

# TLS-related settings
# Path to root CA, needed if using TLS
# root_ca_path=../kuksa-databroker/certificates/CA.pem
# root_ca_path=../kuksa-common/tls/CA.pem

# Server name, typically only needed if accessing server by IP address like 127.0.0.1
# tls_server_name=localhost

# Token file for authorization.
# token=../kuksa-databroker/jwt/provide-all.token
# token=../kuksa-common/jwt/provide-all.token
# token=../kuksa.val/kuksa_certificates/jwt/super-admin.json.token

# Definitions on what directions to support.
dbc2val = True
# Note that to enable val2dbc you must use SocketCAN, you cannot use candumpfile
val2dbc = True

[can]
# CAN port, use elmcan to start the elmcan bridge
#port = can0
port = vcan0
#port = elmcan
# Enable SAE-J1939 Mode. False: ignore
j1939 = False
# DBC file used to parse CAN 
dbcfile = HnR.dbc
# candumpfile = fake_candump.log

# JSON file containing default values for dbc signals
dbc_default_file = dbc_default_values.json

[elmcan]
# Config for CAN port is \"elmcan\"
port = /dev/ttyAMA0
baud = 2000000
canack = false
speed = 500000

